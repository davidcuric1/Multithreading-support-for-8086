#include "kersem.h"
#include "system.h"
#include "schedule.h"

timeList *KernelSem::sleepingList = new timeList();

KernelSem::KernelSem(int value){
	lock();
		if(value < 0)this->val = 0;
		else this->val = value;
		this->myWaitList = new List();
	unlock();
}

void KernelSem::signal(){
lock();
	this->val++;
	if(this->val <= 0){
		PCB* toUnblock = this->myWaitList->get();
		if(toUnblock == 0){unlock();return;}
		else {
			//sleepList->remove TREBA DODATI
			sleepingList->remove((PCB*)System::running);
			toUnblock->myState = PCB::READY;
			toUnblock->wakeUpType = PCB::bySignal;
			toUnblock->mySem = 0;
			Scheduler::put(toUnblock);
		}
	}
unlock();
}

int KernelSem::wait(Time maxToWait){// proveri valjaju li lokovi
	lock();
		if(maxToWait < 0)maxToWait = 0;
		this->val = this->val - 1;
		if(this->val < 0){ // treba da se blokira
			System::running->mySem = this;
			if(maxToWait!=0){
				System::running->sleepTime = maxToWait;
				sleepingList->put((PCB*)System::running);
			}
			this->myWaitList->put((PCB*)System::running);
			System::running->myState = PCB::BLOCKED;
			System::dispatch();
			unlock();
			return System::running->wakeUpType;
		}
	unlock();
		return 0;


}

int KernelSem::getVal() const {
	return val;
}

KernelSem::~KernelSem(){
	lock();
		delete this->myWaitList;
	unlock();
}
